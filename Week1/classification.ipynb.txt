{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of classification.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "MfjrSYu-WKDo"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uFl5VYXPIY7D",
        "colab_type": "text"
      },
      "source": [
        "#M2: Breast Cancer Diagnosis via Linear Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MkFIjttvIhDs",
        "colab_type": "text"
      },
      "source": [
        "We will use the widely-used breast cancer data set.  This data set is described [here](https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin).\n",
        "\n",
        "\n",
        "\n",
        "Each sample is a collection of features that were manually recorded by a physician upon inspecting a sample of cells from fine needle aspiration. \n",
        "\n",
        "**The goal is to detect if the cells are benign or malignant.**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9TNtqa-3I1K7",
        "colab_type": "text"
      },
      "source": [
        "#### Loading and Visualizing the Data\n",
        "\n",
        "We first load the packages as usual."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x2uPPzaUIP_b",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn import datasets, linear_model, preprocessing\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VWEojdFDI8AK",
        "colab_type": "text"
      },
      "source": [
        "Next, we load the data.  It is important to remove the missing values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YCBZS-xbI9gt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "outputId": "72948a55-cbf7-4b86-d213-54d01a3bb492"
      },
      "source": [
        "names = ['id','thick','size','shape','marg','cell_size','bare',\n",
        "         'chrom','normal','mit','class']\n",
        "df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/' +\n",
        "                 'breast-cancer-wisconsin/breast-cancer-wisconsin.data',\n",
        "                names=names,na_values='?',header=None)\n",
        "df = df.dropna()\n",
        "df.head(6)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>thick</th>\n",
              "      <th>size</th>\n",
              "      <th>shape</th>\n",
              "      <th>marg</th>\n",
              "      <th>cell_size</th>\n",
              "      <th>bare</th>\n",
              "      <th>chrom</th>\n",
              "      <th>normal</th>\n",
              "      <th>mit</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000025</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1002945</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>7</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1015425</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1016277</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1017023</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1017122</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>8</td>\n",
              "      <td>7</td>\n",
              "      <td>10.0</td>\n",
              "      <td>9</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        id  thick  size  shape  marg  ...  bare  chrom  normal  mit  class\n",
              "0  1000025      5     1      1     1  ...   1.0      3       1    1      2\n",
              "1  1002945      5     4      4     5  ...  10.0      3       2    1      2\n",
              "2  1015425      3     1      1     1  ...   2.0      3       1    1      2\n",
              "3  1016277      6     8      8     1  ...   4.0      3       7    1      2\n",
              "4  1017023      4     1      1     3  ...   1.0      3       1    1      2\n",
              "5  1017122      8    10     10     8  ...  10.0      9       7    1      4\n",
              "\n",
              "[6 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OYHiBO1UJEag",
        "colab_type": "text"
      },
      "source": [
        "After loading the data, we can create a scatter plot of the data labeling the class values with different colors.  We will pick two of the features.  "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DnS-dnPIJGkc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "aa4d1e37-27ab-42d2-a297-8dbc47f9663e"
      },
      "source": [
        "# Converting to a zero-one indicator.\n",
        "yraw = np.array(df['class'])\n",
        "BEN_VAL = 2   # value in the 'class' label for benign samples\n",
        "MAL_VAL = 4   # value in the 'class' label for malignant samples\n",
        "y = (yraw == MAL_VAL).astype(int)\n",
        "Iben = (y==0)\n",
        "Imal = (y==1)\n",
        "\n",
        "# Get two predictors\n",
        "xnames =['size','marg'] \n",
        "X = np.array(df[xnames])\n",
        "\n",
        "# Create the scatter plot\n",
        "plt.plot(X[Imal,0],X[Imal,1],'r.')\n",
        "plt.plot(X[Iben,0],X[Iben,1],'g.')\n",
        "plt.xlabel(xnames[0], fontsize=16)\n",
        "plt.ylabel(xnames[1], fontsize=16)\n",
        "plt.ylim(0,14)\n",
        "plt.legend(['malign','benign'],loc='upper right')\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7ff87fecf588>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "89PPJ0mNJIdg",
        "colab_type": "text"
      },
      "source": [
        "The above plot is not informative, since many of the points are on top of one another.  Thus, we cannot see the relative frequency of points.  \n",
        "\n",
        "One way to improve the plot is to draw circles on each point whose size is proportional to the count of samples at that point.  We will re-use this code, so we define a function. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2D1BF4bRJKro",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "5cab2e78-78a9-4e3e-87bc-4deb60eb8c99"
      },
      "source": [
        "def plot_count(X,y):\n",
        "    \n",
        "    # Compute the bin edges for the 2d histogram\n",
        "    x0val = np.array(list(set(X[:,0]))).astype(float)\n",
        "    x1val = np.array(list(set(X[:,1]))).astype(float)\n",
        "    x0, x1 = np.meshgrid(x0val,x1val)\n",
        "    x0e= np.hstack((x0val,np.max(x0val)+1))\n",
        "    x1e= np.hstack((x1val,np.max(x1val)+1))\n",
        "\n",
        "    # Make a plot for each class\n",
        "    yval = list(set(y))\n",
        "    color = ['g','r']\n",
        "    for i in range(len(yval)):\n",
        "        I = np.where(y==yval[i])[0]\n",
        "        count, x0e, x1e = np.histogram2d(X[I,0],X[I,1],[x0e,x1e])\n",
        "        x0, x1 = np.meshgrid(x0val,x1val)\n",
        "        plt.scatter(x0.ravel(), x1.ravel(), s=2*count.ravel(),alpha=0.5,\n",
        "                    c=color[i],edgecolors='none')\n",
        "    plt.ylim([0,14])\n",
        "    plt.legend(['benign','malign'], loc='upper right')\n",
        "    plt.xlabel(xnames[0], fontsize=16)\n",
        "    plt.ylabel(xnames[1], fontsize=16)\n",
        "    return plt\n",
        "\n",
        "plot_count(X,y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<module 'matplotlib.pyplot' from '/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py'>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aROvueqkJLdM",
        "colab_type": "text"
      },
      "source": [
        "## In-Class Exercise\n",
        "\n",
        "Based on the above plot, what would you think a good \"classifer\" using the two features could be? That is, write a rule that can classify the benign region from the malignant region."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OhtSZi3LJNPk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# TODO"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "28WXo95PJRH0",
        "colab_type": "text"
      },
      "source": [
        "## Some Simple Classification ideas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QxTNSnYRJTFd",
        "colab_type": "text"
      },
      "source": [
        "Here are some ideas for classification that you may have already thought of.  We can see that the benign samples are located in the lower left.  So, one simple classification rule is to define the region with a line.  We plot the region for one possible line with the following code."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kX-oMLNtJU4m",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "8e7bee37-9d08-43f9-99ad-dd9bb2ec49de"
      },
      "source": [
        "from matplotlib import patches\n",
        "plt = plot_count(X,y)\n",
        "\n",
        "ax = plt.gca() \n",
        "ax.add_patch(\n",
        "    patches.Polygon([[0,0],[0,4],[6,0]],\n",
        "        color='green',\n",
        "        fill=False, hatch = '//'\n",
        "    )\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.patches.Polygon at 0x7ff87f934a20>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2I2qle_MJXbt",
        "colab_type": "text"
      },
      "source": [
        "Here is an alternate classification rule based on two linear constraints.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nfNFSJHMJWsz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "17423960-8c7b-420b-f34c-9cc2c1249306"
      },
      "source": [
        "plt = plot_count(X,y)\n",
        "ax = plt.gca()\n",
        "ax.add_patch(\n",
        "    patches.Rectangle(\n",
        "        (0, 0),   # (x,y)\n",
        "        width=3.5, height=4.5,  color='green',\n",
        "        fill=False, hatch = '//'\n",
        "    )\n",
        ")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.patches.Rectangle at 0x7ff87f8ad6d8>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CDPT0ayEJfFi",
        "colab_type": "text"
      },
      "source": [
        "#### Let us try to find the best linear classifier by using linear regression!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7pa0vQgWJhZ9",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "94fa050f-db25-42b5-c758-bc49ed2eba3b"
      },
      "source": [
        "xnames =['size','marg'] \n",
        "X = np.array(df[xnames])\n",
        "\n",
        "y1=y-0.5\n",
        "\n",
        "\n",
        "\n",
        "from sklearn import datasets, linear_model\n",
        "regr = linear_model.LinearRegression()\n",
        "regr.fit(X,y1)\n",
        "\n",
        "print('w0 =',regr.intercept_)\n",
        "print('[w1, w2] =',regr.coef_)\n",
        "\n",
        "#yhat = regr.predict(X)\n",
        "#print(yhat)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "w0 = -0.5842006662006151\n",
            "[w1, w2] = [0.10007944 0.04197521]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wi-LzouWJ0Cq",
        "colab_type": "text"
      },
      "source": [
        "We can visualize this linear regression function as a separating line by setting $y_1=0$, where $y_1=w_0+w_1 x_1 + w_2 x_2$.\n",
        "\n",
        "We find the relation between the two features ($x_1, x_2$ ) by setting\n",
        "$w_0+w_1 x_1 + w_2 x_2= 0$ $\\implies$  $x_2= (-w_0 - w_1 x_1)/w_2$\n",
        "\n",
        "We can plot this line together with the previous scatter plot."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-b7kTBdFJ1uX",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "1a804a40-c7a5-452f-e154-e47cec6006a2"
      },
      "source": [
        "\n",
        "w0=regr.intercept_\n",
        "w1=regr.coef_[0]\n",
        "w2=regr.coef_[1]\n",
        "plt = plot_count(X,y)\n",
        "\n",
        "#Generating a line using the weights w0, w1, w2\n",
        "x1=np.zeros([11,1])\n",
        "x2=np.zeros([11,1])\n",
        "for i in range(11):\n",
        "    x1[i]=i;\n",
        "    x2[i]=(- w0-w1*i)/w2\n",
        "    \n",
        "plt.plot(x1, x2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ff87f821be0>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "utONKYWSJ5Os",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "outputId": "05392649-b99b-468c-be26-67ad84ce72e8"
      },
      "source": [
        "# Create the scatter plot\n",
        "plt.plot(X[Imal,0],X[Imal,1],'r.')\n",
        "plt.plot(X[Iben,0],X[Iben,1],'g.')\n",
        "plt.xlabel(xnames[0], fontsize=16)\n",
        "plt.ylabel(xnames[1], fontsize=16)\n",
        "plt.ylim(0,14)\n",
        "plt.legend(['malign','benign'],loc='upper right')\n",
        "\n",
        "\n",
        "x1=np.zeros([11,1])\n",
        "x2=np.zeros([11,1])\n",
        "for i in range(11):\n",
        "    x1[i]=i;\n",
        "    x2[i]=(- w0-w1*i)/w2\n",
        "    \n",
        "plt.plot(x1, x2)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7ff87f81dd68>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "__2VFOQpJ7zT",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f7e65d52-1755-4041-8b7a-ec7a45d09e06"
      },
      "source": [
        "yhat=regr.predict(X)\n",
        "yhati= (yhat >=0).astype(int)\n",
        "acc = np.mean(yhati == y)\n",
        "\n",
        "print(\"Accuracy on training data using two features = %f\" % acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training data using two features = 0.922401\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uXhHxRuNJ-D1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "15b4de28-2307-40c5-dba6-1d999a3bceb5"
      },
      "source": [
        "xnames = ['thick','size','shape','marg','cell_size','bare',\n",
        "         'chrom','normal','mit']\n",
        "X = np.array(df[xnames])\n",
        "# y1 = y - 0.5\n",
        "Xs = preprocessing.scale(X)\n",
        "regr.fit(Xs,y1)\n",
        "yhat=regr.predict(Xs)\n",
        "yhati= (yhat >=0).astype(int)\n",
        "acc = np.mean(yhati == y)\n",
        "\n",
        "print(\"Accuracy on training data using 10 features = %f\" % acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training data using 10 features = 0.960469\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jOe9NzsHEfjq",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 69
        },
        "outputId": "e2220c8f-506c-486a-c6b6-5933c4865857"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(Xs, y1, test_size=0.33)\n",
        "regr = linear_model.LinearRegression()\n",
        "regr.fit(X_train,y_train)\n",
        "y_test = y_test + 0.5\n",
        "\n",
        "yhat = regr.predict(X_test)\n",
        "yhati = (yhat >=0).astype(int)\n",
        "print(yhati.shape)\n",
        "print(y_test.shape)\n",
        "acc = np.mean(yhati==y_test)\n",
        "print(acc)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(226,)\n",
            "(226,)\n",
            "0.9778761061946902\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4itWM5Fx5XDV",
        "colab_type": "text"
      },
      "source": [
        "#Module 3: Logistic Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DNz9B7Xd5b5u",
        "colab_type": "text"
      },
      "source": [
        "This demo illustrate an important classifier known as *logistic regression*.  In logistic regression, we do not just output an estimate of the class label, `yhat`.  Instead, we ouput a *probability*, an estimate of how likely the sample is one class or the other.  That is our output is a number from 0 to 1 representing the likelihood."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vUfVu0HH5uYr",
        "colab_type": "text"
      },
      "source": [
        "## Fitting the Logistic Model\n",
        "\n",
        "In a logistic model, we must fit the weights $w_0,w_1,\\ldots,w_k$ in the model \n",
        "$$\n",
        "    \\quad z = w_0 + w_1x_1 + \\cdots + w_kx_k, \n",
        "$$\n",
        "$$\n",
        "    \\hat{y} = sigmoid(z)  \n",
        "$$\n",
        "The `sklearn` module has very good routines for fitting this model.  First we get the training data and samples.  We will standardize the `X` values to make more sense of the slope values."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wwU5zs465yZR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "xnames = ['thick','size','shape','marg','cell_size','bare',\n",
        "         'chrom','normal','mit']\n",
        "X = np.array(df[xnames])\n",
        "Xs = preprocessing.scale(X)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Q79r3_-8Sdr",
        "colab_type": "text"
      },
      "source": [
        "Next, we create a logistic regression object.  The parameter `C` states the level of regularization and will be discussed in class."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a-f2iswB8fEL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 104
        },
        "outputId": "fb8d5771-f239-4323-91c3-ed7a1784e159"
      },
      "source": [
        "logreg = linear_model.LogisticRegression(C=1e5)\n",
        "logreg.fit(Xs, y)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=100000.0, class_weight=None, dual=False,\n",
              "                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,\n",
              "                   max_iter=100, multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2F9914WL8k_W",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "7543bbb4-ab2e-4b63-9bd7-2b59fa139c55"
      },
      "source": [
        "yhat = logreg.predict(Xs)\n",
        "acc = np.mean(yhat == y)\n",
        "print(\"Accuracy on training data = %f\" % acc)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy on training data = 0.969253\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O9l3kAfP8rRP",
        "colab_type": "text"
      },
      "source": [
        "It is also useful to print the weights for each feature.  We can use the `pandas` package to make a table. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8MIHqGRr8tEA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "outputId": "5a03d446-7d2b-4a76-c96d-e34b8fa8785e"
      },
      "source": [
        "W=logreg.coef_\n",
        "data = {'feature': xnames, 'slope': np.squeeze(W)}\n",
        "dfslope = pd.DataFrame(data=data)\n",
        "dfslope"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature</th>\n",
              "      <th>slope</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>thick</td>\n",
              "      <td>1.508053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>size</td>\n",
              "      <td>-0.019233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>shape</td>\n",
              "      <td>0.963721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>marg</td>\n",
              "      <td>0.946439</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>cell_size</td>\n",
              "      <td>0.214663</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>bare</td>\n",
              "      <td>1.394654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>chrom</td>\n",
              "      <td>1.094675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>normal</td>\n",
              "      <td>0.649846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>mit</td>\n",
              "      <td>0.926017</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     feature     slope\n",
              "0      thick  1.508053\n",
              "1       size -0.019233\n",
              "2      shape  0.963721\n",
              "3       marg  0.946439\n",
              "4  cell_size  0.214663\n",
              "5       bare  1.394654\n",
              "6      chrom  1.094675\n",
              "7     normal  0.649846\n",
              "8        mit  0.926017"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MfjrSYu-WKDo",
        "colab_type": "text"
      },
      "source": [
        "# Module 4: Thresholding and ROC\n",
        "\n",
        "For classification models, performance measurement is an essential task. We use AUC (Area Under The Curve) ROC (Receiver Operating Characteristics) curve for this purpose.\n",
        "\n",
        "## Errors in Binary Classification\n",
        "\n",
        "There are two types of errors here:\n",
        "* Type I error (False Positive or false alarm):  Decide $\\hat{y}=1$ when ${y}=0$ \n",
        "* Type II error (False Negative or missed detection):  Decide $\\hat{y}=1$ when ${y}=1$\n",
        "\n",
        "Decision Types:\n",
        "* **False Positive (FP)** decision implies that the patient is inaccurately diagnosed with breast cancer (in this case).\n",
        "* **False Negative (FN)** decision implies that the patient has breast canser (in this case) but is identified as they don't. \n",
        "* **True Positive (TP)** decision implies that the patient is accurately diagnosed with breast cancer (in this case).\n",
        "* **True Negative (TN)** decision implies that the patient is accurately identified as not having breast cancer (in this case).\n",
        "\n",
        "\n",
        "To keep the errors in check we measure the accuracy of the classifier:\n",
        "\n",
        "* TPR (True Positive Rate) also referred to as Sensitivity, or Recall = TP/(TP + FN)\n",
        "\n",
        "* TNR (True Negative Rate) also called Specificity = TN/(TN + FP)\n",
        "\n",
        "* FPR (False Positive Rate) or 1 - Specificity = FP/(TN+FP)\n",
        "\n",
        "*Sensitivity* measures the proportion of actual positives that are correctly identified as such (that is, the percentage of patients accurately diagnosed with breast cancer).\n",
        "\n",
        "*Specificity* measures the proportion of actual negatives that are correctly identified as such (that is, the percentage of healthy patients who are accurately identified as not having breast cancer).\n",
        "\n",
        "*Accuracy* measures the percentage of correct classification\n",
        "\n",
        "* **TPR** / Sensitivity =  $P(\\hat{y}=1|y=1)$ \n",
        "* **FPR** / 1- Specificity = $P(\\hat{y}=1|y=0)$\n",
        "* **Accuracy** = $P(\\hat{y}=1|y=1)$ + $P(\\hat{y}=0|y=0)$\n",
        "\n",
        "(Where y is true decision, yhat is the predicted output)\n",
        "\n",
        "**[Confusion matrix](https://en.wikipedia.org/wiki/Confusion_matrix)**, also known as an error matrix, is useful to visualize the errors.\n",
        "\n",
        "| Real/Predicted| Class Positive - Predicted | Class Negative  - Predicted| \n",
        "|---|---|---|\n",
        "| **Class Positive - Real**  |  TP |  FN |  \n",
        "|  **Class Negative - Real** |  FP |  TN |  \n",
        "\n",
        " \n",
        "## ROC curve and AUC:\n",
        "\n",
        "ROC is a probability curve and AUC represents the degree or measure of separability. It tells us how much our model is capable of distinguishing between classes. \n",
        "\n",
        "*Higher the AUC, better the model is at predicting 0s as 0s and 1s as 1s.* So, higher the AUC, better the model is at distinguishing between patients with breast cancer and no breast cancer.\n",
        "\n",
        "\n",
        "As shown above, the logistic classifier outputs a *soft* classification $P(y=1|x)$.  One simple idea is to select the class label $\\hat{y}=1$ whenever $P(y=1|x) > 0.5$.  \n",
        "\n",
        "However, one can also set $\\hat{y}=1$ whenever $P(y=1|x) > t$ for some threshold $t$. \n",
        "\n",
        "\n",
        "Using higher thresholds values selects $\\hat{y}=0$ more often which results in fewer *false alarms*, but also many *missed detections* (reduces sensitivity).  Similarly, lower thresholds values selects $\\hat{y}=1$ more often which results in fewer *missed detections* (increases *sensitivity*) but also more *false alarms*.  The ROC curve displays this  tradeoff by graphing the *true positive rate* vs. *false positive rate* obtained with different $t$.  \n",
        "\n",
        "The ROC curve can be plotted in the `sklearn` package with the following code."
      ]
    }
  ]
}